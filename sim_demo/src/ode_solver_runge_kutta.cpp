#include "ode_solver_runge_kutta.h"

#include <vector>

#include "fmtlog.h"


// ======================================================================================================================
// 任意阶的龙格库塔求解矩阵（Butcher表）
// c1 | a11   a12 ... a1s
// c2 | a21   a22 ... a2s
// .  | .
// .  | .
// .  | .
// cs | as1   as2 ... ass
//----|------------------------
//    | b1    b2  ... bs 
//
// Butcher表A矩阵每一行的和等于对应的c
// B的和为1
//
// ki = f(tn+ci*h, yn+h*Sigma(aij*kj, for j=1:i))
// y_n+1 = yn + h * Sigma(bi*ki, for i=1:s)
//
// 实际使用的Butcher表A阵缺少第一行和最后一列，因为都为0，A的大小为(stage - 1, stage - 1)
// c向量第一行为0，因此也省略掉，C的长度为(stage - 1)
// b的每一项系数都要使用，因此b的长度为(stage)


// ======================================================================================================================
// 一阶龙格库塔法（欧拉法）的系数, Numerical Methods for Ordinary Differential Equations(second edition), P170
constexpr int STAGE_1 = 1;
constexpr double A1[1] = { 0.0 };
constexpr double C1[1] = { 0.0 };
constexpr double B1[1] = { 1.0 };


// ======================================================================================================================
// 二阶龙格库塔法（Heun法）的系数, Numerical Methods for Ordinary Differential Equations(second edition), P170
constexpr int STAGE_2 = 2;
constexpr double A2[1] = { 1.0 };
constexpr double C2[1] = { 1.0 };
constexpr double B2[2] = { 0.5, 0.5 };


// ======================================================================================================================
// 三阶龙格库塔法的系数, Numerical Methods for Ordinary Differential Equations(second edition), P171
constexpr int STAGE_3 = 3;
constexpr double A3[9] = {  // 2x2
	 2.0 / 3.0, 0.0,
	-1.0 / 3.0, 1.0,
};
constexpr double C3[2] = { 2.0 / 3.0, 2.0 / 3.0 };
constexpr double B3[3] = { 1.0 / 4.0, 1.0 / 2.0, 1.0 / 4.0};


// ======================================================================================================================
// 四阶龙格库塔法的系数, Numerical Methods for Ordinary Differential Equations(second edition), P180
constexpr int STAGE_4 = 4;
constexpr double A4[9] = {  // 3x3
	1.0 / 2.0, 0.0,       0.0,
	0.0,       1.0 / 2.0, 0.0,
	0.0,       0.0,       1.0
};
constexpr double C4[3] = { 1.0 / 2.0, 1.0 / 2.0, 1.0 };
constexpr double B4[4] = { 1.0 / 6.0, 1.0 / 3.0, 1.0 / 3.0, 1.0 / 6.0 };


// ======================================================================================================================
// 五阶龙格库塔法的系数, Numerical Methods for Ordinary Differential Equations(second edition), P191
constexpr int STAGE_5 = 5;
constexpr double A5[25] = {  // 5x5
	1.0 / 4.0,  0.0,        0.0,       0.0,         0.0,
	1.0 / 8.0,  1.0 / 8.0,  0.0,       0.0,         0.0,
	0.0,        0.0,        1.0 / 2.0, 0.0,         0.0,
	3.0 / 16.0, -3.0 / 8.0, 3.0 / 8.0, 9.0 / 16.0,  0.0,
	-3.0 / 7.0, 8.0 / 7.0,  6.0 / 7.0, -12.0 / 7.0, 8.0 / 7.0
};
constexpr double C5[5] = { 1.0 / 4.0, 1.0 / 4.0, 1.0 / 2.0, 3.0 / 4.0, 1.0 };
constexpr double B5[6] = { 7.0 / 90.0, 0.0, 16.0 / 45.0, 2.0 / 15.0, 16.0 / 45.0, 7.0 / 90.0 };


// ======================================================================================================================
// 六阶龙格库塔法的系数, Numerical Methods for Ordinary Differential Equations(second edition), P194
constexpr int STAGE_6 = 7;
constexpr double A6[36] = {  // 6x6
	1.0 / 3.0,     0.0,          0.0,          0.0,           0.0,          0.0,
	0.0,           2.0 / 3.0,    0.0,          0.0,           0.0,          0.0,
	1.0 / 12.0,    1.0 / 3.0,    -1.0 / 12.0,  0.0,           0.0,          0.0,
	25.0 / 48.0,   -55.0 / 24.0, 35.0 / 48.0,  15.0 / 8.0,    0.0,          0.0,
	3.0 / 20.0,    -11.0 / 24.0, -1.0 / 8.0,   1.0 / 2.0,     1.0 / 10,     0.0,
	-261.0 / 260.0, 33.0 / 13.0, 43.0 / 156.0, -118.0 / 39.0, 32.0 / 195.0, 80.0 / 39.0
};
constexpr double C6[6] = { 1.0 / 3.0, 2.0 / 3.0, 1.0 / 3.0, 5.0 / 6.0, 1.0 / 6.0, 1.0 };
constexpr double B6[7] = { 13.0 / 200.0, 0.0, 11.0 / 40.0, 11.0 / 40.0, 4.0 / 25.0, 4.0 / 25.0, 13.0 / 200.0 };


// ======================================================================================================================
// 七阶龙格库塔法的系数, Numerical Methods for Ordinary Differential Equations(second edition), P196
constexpr int STAGE_7 = 9;
constexpr double A7[64] = {  // 8x8
	1.0 / 6.0,       0.0,       0.0,            0.0,                0.0,                0.0,             0.0,             0.0,
	0.0,             1.0 / 3.0, 0.0,            0.0,                0.0,                0.0,             0.0,             0.0,
	1.0 / 8.0,       0.0,       3.0 / 8.0,      0.0,                0.0,                0.0,             0.0,             0.0,
	148.0 / 1331.0,  0.0,       150.0 / 1331.0, -56.0 / 1331.0,     0.0,                0.0,             0.0,             0.0,
	-404.0 / 243.0,  0.0,       -170.0 / 27.0,  4024.0 / 1701.0,    10648.0 / 1701.0,   0.0,             0.0,             0.0,
	2466.0 / 2401.0, 0.0,       1242.0 / 343.0, -19176.0 / 16807.0, -51909.0 / 16807.0, 1053.0 / 2401.0, 0.0,             0.0,
	5.0 / 154.0,     0.0,       0.0,            96.0 / 539.0,       -1815.0 / 20384.0,  -405.0 / 2464.0, 49.0 / 1144.0,   0.0,
	-113.0 / 32.0,   0.0,       -195.0 / 22.0,  32.0 / 7.0,         29403.0 / 3584.0,   -729.0 / 512.0,  1029.0 / 1408.0, 21.0 / 16.0 
};
constexpr double C7[8] = { 1.0 / 6.0, 1.0 / 3.0, 1.0 / 2.0, 2.0 / 11.0, 2.0 / 3.0, 6.0 / 7.0, 0.0, 1.0 };
constexpr double B7[9] = { 0.0, 0.0, 0.0, 32.0 / 105.0, 1771561.0 / 6289920.0, 243.0 / 2560.0, 16807.0 / 74880.0, 77.0 / 1440.0, 11.0 / 270.0 };


// ======================================================================================================================
// 八阶龙格库塔法的系数, Numerical Methods for Ordinary Differential Equations(second edition), P197
constexpr int STAGE_8 = 11;
// s = sqrt(21)
constexpr double s = 4.58257569495583982899;
constexpr double A8[100] = {  // 10x10
	1.0 / 2.0,         0.0,                     0.0,                         0.0,                         0.0,                         0.0,                           0.0,                          0.0,                       0.0,                        0.0,
	1.0 / 4.0,         1.0 / 4.0,               0.0,                         0.0,                         0.0,                         0.0,                           0.0,                          0.0,                       0.0,                        0.0,
	1.0 / 7.0,         (-7.0 - 3.0 * s) / 98.0, (21.0 + 5.0 * s) / 49.0,     0.0,                         0.0,                         0.0,                           0.0,                          0.0,                       0.0,                        0.0,
	(11.0 + s) / 84.0, 0.0,                     (18.0 + 4.0 * s) / 63.0,     (21.0 - s) / 252.0,          0.0,                         0.0,                           0.0,                          0.0,                       0.0,                        0.0,
	(5.0 + s) / 48.0,  0.0,                     (9.0 + s) / 36.0,            (-231.0 + 14.0 * s) / 360.0, (63.0 - 7.0 * s) / 80.0,     0.0,                           0.0,                          0.0,                       0.0,                        0.0,
	(10.0 - s) / 42.0, 0.0,                     (-432.0 + 92.0 * s) / 315.0, (633.0 - 145.0 * s) / 90.0,  (-504.0 + 115.0 * s) / 70.0, (63.0 - 13.0 * s) / 35.0,      0.0,                          0.0,                       0.0,                        0.0,
	1.0 / 14.0,        0.0,                     0.0,                         0.0,                         (14.0 - 3.0 * s) / 126.0,    (13.0 - 3.0 * s) / 63.0,       1.0 / 9.0,                    0.0,                       0.0,                        0.0,
	1.0 / 32.0,        0.0,                     0.0,                         0.0,                         (91.0 - 21.0 * s) / 576.0,   11.0 / 72.0,                   (-385.0 - 75.0 * s) / 1152.0, (63.0 + 13.0 * s) / 128.0, 0.0,                        0.0,
	1.0 / 14.0,        0.0,                     0.0,                         0.0,                         1.0 / 9.0,                   (-733.0 - 147.0 * s) / 2205.0, (515.0 + 111.0 * s) / 504.0,  (-51.0 - 11.0 * s) / 56.0, (132.0 + 28.0 * s) / 245.0, 0.0,
	0.0,               0.0,                     0.0,                         0.0,                         (-42.0 + 7.0 * s) / 18.0,    (-18.0 + 28.0 * s) / 45.0,     (-273.0 - 53.0 * s) / 72.0,   (301.0 + 53.0 * s) / 72.0, (28.0 - 28.0 * s) / 45.0,   (49.0 - 7.0 * s) / 18.0
};
constexpr double C8[10] = { 1.0 / 2.0, 1.0 / 2.0, (7.0 + s) / 14.0, (7.0 + s) / 14.0, 1.0 / 2.0, (7.0 - s) / 14.0, (7.0 - s) / 14.0, 1.0 / 2.0, (7.0 + s) / 14.0, 1.0 };
constexpr double B8[11] = { 1.0 / 20.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 49.0 / 180.0, 16.0 / 45.0, 49.0 / 180.0, 1.0 / 20.0 };


OdeSolverRungeKuttaN::OdeSolverRungeKuttaN(const int order)
{
	_order = order;
	if (order < 1 || order > 8)
	{
		logw("OdeSolverRungeKuttaN::OdeSolverRungeKuttaN: order {} out of range [1, 8], set order to 1\n",
			order);
		_order = 1;
	}
	switch (_order)
	{
	case 1: a = A1; b = B1; c = C1; _stage = STAGE_1;		break;
	case 2: a = A2; b = B2; c = C2; _stage = STAGE_2;		break;
	case 3: a = A3; b = B3; c = C3; _stage = STAGE_3;		break;
	case 4: a = A4; b = B4; c = C4; _stage = STAGE_4;		break;
	case 5: a = A5; b = B5; c = C5; _stage = STAGE_5;		break;
	case 6: a = A6; b = B6; c = C6; _stage = STAGE_6;		break;
	case 7: a = A7; b = B7; c = C7; _stage = STAGE_7;		break;
	case 8: a = A8; b = B8; c = C8; _stage = STAGE_8;		break;
	}
}


void OdeSolverRungeKuttaN::integrate(ODE* ode, const double dt, const double t, array_d& x)
{
	//k是每stage求导的结果
	std::vector<array_d> k(_stage);

	//stage=0不参与循环
	k[0] = ode->derivative(t, x);

	//d是每一stage导数乘上权重系数b之后结果的累计
	array_d d = k[0] * b[0];
	for (int stage = 1; stage < _stage; stage++)
	{
		//xx是每一stage求导时使用的状态变量，使用之前的所有stage的导数累加
		array_d xx = x;
		for (int j = 0; j < stage; j++)
		{
			xx += k[j] * (dt * get_a(stage - 1, j));
		}
		k[stage] = ode->derivative(t + dt * c[stage - 1], xx);
		d += k[stage] * b[stage];
	}

	x += d * dt;
	ode->set_dot(k.back());
}
